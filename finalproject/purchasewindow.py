# Form implementation generated from reading ui file 'purchasewindow.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
#From PyQt6, import the QTableWidgetItem
from PyQt6.QtWidgets import QTableWidgetItem
#import the pymsql package from my Python library
import pymysql as mdb


class Ui_purchaseWindow(object):
    def setupUi(self, purchaseWindow):
        purchaseWindow.setObjectName("purchaseWindow")
        purchaseWindow.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        purchaseWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=purchaseWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.txtTransactionId = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtTransactionId.setGeometry(QtCore.QRect(370, 90, 161, 20))
        self.txtTransactionId.setObjectName("txtTransactionId")
        self.lblTransactionId = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTransactionId.setGeometry(QtCore.QRect(270, 90, 91, 16))
        self.lblTransactionId.setObjectName("lblTransactionId")
        self.txtQuantity = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtQuantity.setGeometry(QtCore.QRect(370, 160, 161, 20))
        self.txtQuantity.setObjectName("txtQuantity")
        self.lblQuantity = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblQuantity.setGeometry(QtCore.QRect(300, 160, 51, 16))
        self.lblQuantity.setObjectName("lblQuantity")
        self.lblBook = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblBook.setGeometry(QtCore.QRect(270, 120, 81, 20))
        self.lblBook.setObjectName("lblBook")
        self.cmbBook = QtWidgets.QComboBox(parent=self.centralwidget)
        self.cmbBook.setGeometry(QtCore.QRect(370, 120, 161, 22))
        self.cmbBook.setObjectName("cmbBook")
        self.btnPurchase = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btnPurchase.setGeometry(QtCore.QRect(360, 200, 75, 23))
        self.btnPurchase.setObjectName("btnPurchase")
        self.lblName = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblName.setGeometry(QtCore.QRect(260, 60, 91, 20))
        self.lblName.setObjectName("lblName")
        self.txtName = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtName.setGeometry(QtCore.QRect(370, 60, 161, 20))
        self.txtName.setReadOnly(False)
        self.txtName.setObjectName("txtName")
        self.lblTitle = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTitle.setGeometry(QtCore.QRect(330, 20, 141, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lblTitle.setFont(font)
        self.lblTitle.setObjectName("lblTitle")
        self.lblSubtotal = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblSubtotal.setGeometry(QtCore.QRect(550, 230, 51, 16))
        self.lblSubtotal.setObjectName("lblSubtotal")
        self.txtSubtotal = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtSubtotal.setGeometry(QtCore.QRect(610, 230, 161, 20))
        self.txtSubtotal.setReadOnly(True)
        self.txtSubtotal.setObjectName("txtSubtotal")
        self.lblTotal = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTotal.setGeometry(QtCore.QRect(550, 290, 51, 16))
        self.lblTotal.setObjectName("lblTotal")
        self.txtTotal = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtTotal.setGeometry(QtCore.QRect(610, 290, 161, 20))
        self.txtTotal.setReadOnly(True)
        self.txtTotal.setObjectName("txtTotal")
        self.lblTax = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTax.setGeometry(QtCore.QRect(590, 260, 91, 16))
        self.lblTax.setObjectName("lblTax")
        purchaseWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=purchaseWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        purchaseWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=purchaseWindow)
        self.statusbar.setObjectName("statusbar")
        purchaseWindow.setStatusBar(self.statusbar)

        self.retranslateUi(purchaseWindow)
        QtCore.QMetaObject.connectSlotsByName(purchaseWindow)
        
        
        #Creating an empty dictionary. This will be populated with book title and price.
        self.book_data={}
        #Estlabish dataase conenction
        self.connecttodb()
        #To load the data from the text file
        self.load_data()
        #When btnPurchase is clicked, to execute the purchase function
        self.btnPurchase.clicked.connect(self.purchase)
        
    #define the connecttodb function
    def connecttodb(self):
        #the lines under the code will be excuted normally under the exception handling 
        try:
            #connect to the speficied host, user with the password, database and port
            connection = mdb.connect(host="localhost", user = "dbuser", password="dbuser", database = "finalprojectdb", port =3306)             
            #if able to connect, return the connection
            return connection
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
    
    #Define the load_data function
    def load_data(self):
        #the lines under the code will be excuted normally under the exception handling 
        try:
            #connect to the database
            connectionobj= self.connecttodb()
            #Create a cursor object
            cursorobj=connectionobj.cursor()
            
            #Open price_data.txt
            with open("price_data.txt", "r") as filename:
                #Read each line in the file
                for line in filename:
                    #data is a list with 2 items (title, price), split them using the comma delimiter
                    data = line.split(",")
                    #add the titles to the combo box and stripping leading or trailing spaces
                    self.cmbBook.addItem(data[0].strip())
                    #add the title and price (integer) into the dictionary
                    self.book_data[data[0]]=int(data[1])
                   
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
        #Close the connection
        finally:
            connectionobj.close()
            
    #Define the purchase function
    def purchase(self):
        #the lines under the code will be excuted normally under the exception handling 
        try:
            
            #Establish a database connection and store the connection objct in variable conn
            conn = self.connecttodb()
            #create a cursor object
            cursorobj = conn.cursor()
            
            #Store the input from the text box in name
            name= self.txtName.text()
            #Store the input from the text box in transactionid
            transactionid = self.txtTransactionId.text()
            #Store the input from the text box in quantity
            quantity = self.txtQuantity.text()
            
            #Store the input from the comb box as selection
            selection=self.cmbBook.currentText()
            #save price_of_book object to read slected book's price from the dictionary
            price_of_book=self.book_data.get(selection)
            
            #If the name doesn't have an vaild input, display the following message
            if name == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Book Purchase App")
                msg.setText("Please enter customer's name.")
                msg.exec()
                return
            #If the transaction ID doesn't have an vaild input, display the following message
            if transactionid == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Book Purchase App")
                msg.setText("Please enter the Transaction ID.")
                msg.exec()  
                return
            #If the quantity doesn't have an vaild input, display the following message
            if quantity == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Book Purchase App")
                msg.setText("Please enter the quantity.")
                msg.exec()
                return
            #Making sure the inputs for transaction ID is an integer
            transactionid = int(self.txtTransactionId.text())
            #making sure it is a string
            name= str(self.txtName.text())
            #Making sure the inputs for quantity is an integer
            quantity = int(self.txtQuantity.text())
            
            #save tax rate as 0.08
            tax_rate = 0.08
            #calculting subtotal
            subtotal = price_of_book*quantity
            #display the subtotal in the txtbox as a string
            self.txtSubtotal.setText(str(subtotal))
            #calculting total
            total = subtotal+(subtotal*tax_rate)
            #display the total in the txtbox as a string
            self.txtTotal.setText(str(total))
            
            #if the total is more than 0, display success in a message box
            if total>0:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Book Purchase App")
                msg.setText("Success")
                msg.exec()
            #if the total is less than 0, display error in a message box
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Book Purchase App")
                msg.setText("Error")
                msg.exec()
            
            #Establish a database connection and store the connection objct in variable conn
            conn = self.connecttodb()
            #create a cursor object
            cursorobj = conn.cursor()
            #execute the SQL query and add the following four titles as the row headers
            cursorobj.execute("insert into book_sales values (%s, %s, %s, %s, %s)", [transactionid, name, selection, quantity, total])
            #Commits the insert transaction to the database table
            conn.commit()
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
        #Close the connection
        finally:
            #If connection object exists
            if(conn):
                conn.close()

    def retranslateUi(self, purchaseWindow):
        _translate = QtCore.QCoreApplication.translate
        purchaseWindow.setWindowTitle(_translate("purchaseWindow", "Purchase Window"))
        self.lblTransactionId.setText(_translate("purchaseWindow", "Transaction ID"))
        self.lblQuantity.setText(_translate("purchaseWindow", "Quantity"))
        self.lblBook.setText(_translate("purchaseWindow", "Select a book"))
        self.btnPurchase.setText(_translate("purchaseWindow", "Purchase"))
        self.lblName.setText(_translate("purchaseWindow", "Customer Name"))
        self.lblTitle.setText(_translate("purchaseWindow", "Book Purchase App"))
        self.lblSubtotal.setText(_translate("purchaseWindow", "Subtotal"))
        self.lblTotal.setText(_translate("purchaseWindow", "Total"))
        self.lblTax.setText(_translate("purchaseWindow", "Tax rate: 8.00%"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    purchaseWindow = QtWidgets.QMainWindow()
    ui = Ui_purchaseWindow()
    ui.setupUi(purchaseWindow)
    purchaseWindow.show()
    sys.exit(app.exec())
