# Form implementation generated from reading ui file 'searchwindow.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
#From PyQt6, import the QTableWidgetItem
from PyQt6.QtWidgets import QTableWidgetItem
#import the pymsql package from my Python library
import pymysql as mdb

class Ui_searchWindow(object):
    def setupUi(self, searchWindow):
        searchWindow.setObjectName("searchWindow")
        searchWindow.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        searchWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=searchWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lblBook = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblBook.setGeometry(QtCore.QRect(250, 110, 81, 16))
        self.lblBook.setObjectName("lblBook")
        self.cmbBook = QtWidgets.QComboBox(parent=self.centralwidget)
        self.cmbBook.setGeometry(QtCore.QRect(330, 110, 211, 22))
        self.cmbBook.setObjectName("cmbBook")
        self.txtAvgPrice = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtAvgPrice.setGeometry(QtCore.QRect(330, 150, 211, 20))
        self.txtAvgPrice.setReadOnly(True)
        self.txtAvgPrice.setObjectName("txtAvgPrice")
        self.lblAvgPrice = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblAvgPrice.setGeometry(QtCore.QRect(250, 150, 81, 16))
        self.lblAvgPrice.setObjectName("lblAvgPrice")
        self.tblBook = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tblBook.setGeometry(QtCore.QRect(110, 230, 601, 192))
        self.tblBook.setObjectName("tblBook")
        self.tblBook.setColumnCount(0)
        self.tblBook.setRowCount(0)
        self.lblTransaction = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTransaction.setGeometry(QtCore.QRect(280, 200, 211, 16))
        self.lblTransaction.setObjectName("lblTransaction")
        self.lblTitle = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTitle.setGeometry(QtCore.QRect(310, 60, 141, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lblTitle.setFont(font)
        self.lblTitle.setObjectName("lblTitle")
        searchWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=searchWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        searchWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=searchWindow)
        self.statusbar.setObjectName("statusbar")
        searchWindow.setStatusBar(self.statusbar)

        self.retranslateUi(searchWindow)
        QtCore.QMetaObject.connectSlotsByName(searchWindow)
        
        #Creating an empty dictionary. This will be populated with book title and price.
        self.book_data={}
        #Estlabish dataase conenction
        self.connecttodb()
        #To load the data from the text file
        self.load_data()
        #When user switches selection, execute the display_price function.
        self.cmbBook.currentIndexChanged.connect(self.display_price)
        
    #define the connecttodb function
    def connecttodb(self):
        #the lines under the code will be excuted normally under the exception handling 
        try:
            #connect to the speficied host, user with the password, database and port
            connection = mdb.connect(host="localhost", user = "dbuser", password="dbuser", database = "finalprojectdb", port =3306)             
            #if able to connect, return the connection
            return connection
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
    
    #Define the load_data function
    def load_data(self):
        #the lines under the code will be excuted normally under the exception handling 
        try:
            #connect to the database
            connectionobj= self.connecttodb()
            #Create a cursor object
            cursorobj=connectionobj.cursor()
            
            #Open price_data.txt
            with open("price_data.txt", "r") as filename:
                #Read each line in the file
                for line in filename:
                    #data is a list with 2 items (book title, price), split them using the comma delimiter
                    data = line.split(",")
                    #add the titles to the combo box and stripping leading or trailing spaces
                    self.cmbBook.addItem(data[0].strip())
                    #add the title and price (integer) into the dictionary
                    self.book_data[data[0]]=int(data[1])
                    
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
        #Close the connection
        finally:
            connectionobj.close()
    
    #Define the display_price function
    def display_price(self):
        #the lines under the code will be excuted normally under the exception handling 
        try:
            #connect to the database
            connectionobj= self.connecttodb()
            #Create a cursor object
            cursorobj=connectionobj.cursor()
            
            #Store the current selected book in selection
            selection=self.cmbBook.currentText()
            
            #Establish a database connection and store the connection objct in variable conn
            conn = self.connecttodb()
            #create a cursor object
            cursorobj = conn.cursor()
            #excute the SQL query to find the average in the table where the booktitle is the selected book
            cursorobj.execute("select avg(total) from book_sales where booktitle = %s", (selection,))
            #results variable is saved for one fetched from the query
            results = cursorobj.fetchone()[0]
            #display the result in the textbox
            self.txtAvgPrice.setText(str(results))
            
            #Execute SQL query "select * from book_sales" for the selected book
            cursorobj.execute("select * from book_sales where booktitle= %s",(selection,))
            #results variable is saved all all the rows fetched from the query for that specfic book
            results1 = cursorobj.fetchall()
            #Find number of rows in the result set
            row_length = len(results1)
            #Find number of columns in the result set
            col_length = len(cursorobj.description)
            #Label the column headers
            col_header = ["Transaction Id", "Name", "Book Title", "Quantity", "Total"]
            #Set the number of rows
            self.tblBook.setRowCount(row_length)
            #Set the number of columns
            self.tblBook.setColumnCount(col_length)
            #Set the column headers
            self.tblBook.setHorizontalHeaderLabels(col_header)
            
            #Display the table, all the rows and columns
            for rownumber, rowdata in enumerate(results1):
                for colnumber, coldata in enumerate(rowdata):
                    #Insert each of the data into the table widget
                    self.tblBook.setItem(rownumber, colnumber, QTableWidgetItem(str(coldata)))
            
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
        #Close the connection
        finally:
            connectionobj.close()    

    def retranslateUi(self, searchWindow):
        _translate = QtCore.QCoreApplication.translate
        searchWindow.setWindowTitle(_translate("searchWindow", "Search Window"))
        self.lblBook.setText(_translate("searchWindow", "Select a book"))
        self.lblAvgPrice.setText(_translate("searchWindow", "Average Price"))
        self.lblTransaction.setText(_translate("searchWindow", "All Transactions of the Selected Book "))
        self.lblTitle.setText(_translate("searchWindow", "Book Purchase App"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    searchWindow = QtWidgets.QMainWindow()
    ui = Ui_searchWindow()
    ui.setupUi(searchWindow)
    searchWindow.show()
    sys.exit(app.exec())
