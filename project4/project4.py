# Form implementation generated from reading ui file 'project4.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
#From PyQt6, import the QTableWidgetItem
from PyQt6.QtWidgets import QTableWidgetItem
#import the pymsql package from my Python library
import pymysql as mdb


class Ui_studentGrade(object):
    def setupUi(self, studentGrade):
        studentGrade.setObjectName("studentGrade")
        studentGrade.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        studentGrade.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=studentGrade)
        self.centralwidget.setObjectName("centralwidget")
        self.tbStudentGrade = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tbStudentGrade.setGeometry(QtCore.QRect(110, 40, 471, 421))
        self.tbStudentGrade.setObjectName("tbStudentGrade")
        self.tab1 = QtWidgets.QWidget()
        self.tab1.setObjectName("tab1")
        self.lblStudentId = QtWidgets.QLabel(parent=self.tab1)
        self.lblStudentId.setGeometry(QtCore.QRect(80, 50, 101, 16))
        self.lblStudentId.setObjectName("lblStudentId")
        self.txtStudentId = QtWidgets.QLineEdit(parent=self.tab1)
        self.txtStudentId.setGeometry(QtCore.QRect(220, 50, 113, 20))
        self.txtStudentId.setObjectName("txtStudentId")
        self.lblName = QtWidgets.QLabel(parent=self.tab1)
        self.lblName.setGeometry(QtCore.QRect(80, 80, 121, 16))
        self.lblName.setObjectName("lblName")
        self.txtName = QtWidgets.QLineEdit(parent=self.tab1)
        self.txtName.setGeometry(QtCore.QRect(220, 80, 113, 20))
        self.txtName.setObjectName("txtName")
        self.lblScore = QtWidgets.QLabel(parent=self.tab1)
        self.lblScore.setGeometry(QtCore.QRect(80, 110, 121, 16))
        self.lblScore.setObjectName("lblScore")
        self.txtScore = QtWidgets.QLineEdit(parent=self.tab1)
        self.txtScore.setGeometry(QtCore.QRect(220, 110, 113, 20))
        self.txtScore.setObjectName("txtScore")
        self.btnInsert = QtWidgets.QPushButton(parent=self.tab1)
        self.btnInsert.setGeometry(QtCore.QRect(100, 150, 75, 23))
        self.btnInsert.setObjectName("btnInsert")
        self.btnDisplay = QtWidgets.QPushButton(parent=self.tab1)
        self.btnDisplay.setGeometry(QtCore.QRect(210, 150, 91, 23))
        self.btnDisplay.setObjectName("btnDisplay")
        self.tblData = QtWidgets.QTableWidget(parent=self.tab1)
        self.tblData.setGeometry(QtCore.QRect(10, 180, 431, 192))
        self.tblData.setObjectName("tblData")
        self.tblData.setColumnCount(0)
        self.tblData.setRowCount(0)
        self.tbStudentGrade.addTab(self.tab1, "")
        self.tab2 = QtWidgets.QWidget()
        self.tab2.setObjectName("tab2")
        self.btnExport = QtWidgets.QPushButton(parent=self.tab2)
        self.btnExport.setGeometry(QtCore.QRect(190, 60, 75, 23))
        self.btnExport.setObjectName("btnExport")
        self.lstData = QtWidgets.QListWidget(parent=self.tab2)
        self.lstData.setGeometry(QtCore.QRect(20, 110, 431, 192))
        self.lstData.setObjectName("lstData")
        self.tbStudentGrade.addTab(self.tab2, "")
        studentGrade.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=studentGrade)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        studentGrade.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=studentGrade)
        self.statusbar.setObjectName("statusbar")
        studentGrade.setStatusBar(self.statusbar)

        self.retranslateUi(studentGrade)
        self.tbStudentGrade.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(studentGrade)
        
        #Estlabish dataase conenction
        self.connecttodb()
        #To load the data from the text file
        self.load_data()
        #When the Display button is clicked, execute te display_data function
        self.btnDisplay.clicked.connect(self.display_data)
        #When the Insert button is clicked, execute te insert_data function
        self.btnInsert.clicked.connect(self.insert_data)
        #When the Export button is clicked, execute te export function
        self.btnExport.clicked.connect(self.export)
        #When user changes tabs, Display button is clicked, execute te display_data function
        self.tbStudentGrade.currentChanged.connect(self.show)
        
        
    #define the connecttodb function
    def connecttodb(self):
        try:
            #connect to the speficied host, user with the password, database and port
            connection = mdb.connect(host="localhost", user = "studentdbuser1", password="studentdbuser1", database = "project4db", port =3306)             
            #if able to connect, return the connection
            return connection
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
    
    #Define the load_data function
    def load_data(self):
        try:
            #connect to the database
            connectionobj= self.connecttodb()
            #Create a cursor object
            cursorobj=connectionobj.cursor()
            #Open studentdata.txt
            with open("studentdata.txt", "r") as filename:
                #Read each line in the file
                for line in filename:
                    #data is a list with 3 items (id, name, score), split them using the comma delimiter
                    data = line.split(",")
                    #Insert the values into the studentinfo1 without leading spaeces
                    cursorobj.execute("insert into studentinfo1 values(%s, %s, %s)",[data[0].strip(), data[1].strip(), data[2].strip() ])
                    #Commit after each insert
                    connectionobj.commit()
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
        #Close the connection
        finally:
            connectionobj.close()
    
    #Define the display_data function
    def display_data(self):
        try:
            #Connect to the database
            connectionobj = self.connecttodb()
            #Create a cursor object
            cursorobj=connectionobj.cursor()
            #Execute SQL query "select * from studentinfo1")
            cursorobj.execute("select * from studentinfo1")
            #results variable is saved all all the rows fetched from the query
            results = cursorobj.fetchall()
            #Find number of rows in the result set
            row_length = len(results)
            #Find number of columns in the result set
            col_length = len(cursorobj.description)
            #Label the column headers
            col_header = ["Student Id", "Student Name", "Student Score"]
            #Set the number of rows
            self.tblData.setRowCount(row_length)
            #Set the number of columns
            self.tblData.setColumnCount(col_length)
            #Set the column headers
            self.tblData.setHorizontalHeaderLabels(col_header)
            
            #Display the table, all the rows and columns
            for rownumber, rowdata in enumerate(results):
                for colnumber, coldata in enumerate(rowdata):
                    #Insert each of the data into the specfic cells of the table
                    self.tblData.setItem(rownumber, colnumber, QTableWidgetItem(str(coldata)))
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
        #Close the connection
        finally:
            connectionobj.close()    
            
    def insert_data(self):
        try:
            
            #Establish a database connection and store the connection objct in variable conn
            conn = self.connecttodb()
            #create a cursor object
            cursorobj = conn.cursor()
            #Store the input from the text box in stid
            stid = self.txtStudentId.text()
            #Store the input from the text box in stname
            stname= self.txtName.text()
            #Store the input from the text box in stscore
            stscore = self.txtScore.text()
            
            #If the name doesn't have an vaild input, display the following message
            if stname == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Student Grade")
                msg.setText("Please enter your name.")
                msg.exec()
                return
            #If the Student ID doesn't have an vaild input, display the following message
            if stid == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Student Grade")
                msg.setText("Please enter your student ID.")
                msg.exec()  
                return
            #If the score doesn't have an vaild input, display the following message
            if stscore == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Student Grade")
                msg.setText("Please enter student score.")
                msg.exec()
                return
            #Making sure the inputs for Student ID is an integer
            sid = int(self.txtStudentId.text())
            #Store the input in the Name text box in sname
            sname= self.txtName.text()
            #Making sure the inputs for Student score is an integer
            sscore = int(self.txtScore.text())
            
            #Establish a database connection and store the connection objct in variable conn
            conn = self.connecttodb()
            #create a cursor object
            cursorobj = conn.cursor()
            cursorobj.execute("insert into studentinfo1 values (%s, %s, %s)", [sid, sname, sscore])
            #Commits the insert transaction to the database table
            conn.commit()
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
        #Close the connection
        finally:
            #If connection object exists
            if(conn):
                conn.close()

    #Define the export function
    def export(self):
        try:
            #Store the input from the text box in studentid    
            studentid=self.txtStudentId.text()
            #Store the input from the text box in name
            name=self.txtName.text()
            #Store the input from the text box in score
            score=self.txtScore.text()
            #Making sure the score input is an integer
            sscore = int(score)
            #If the score is 90 or above, grade will be A
            if(sscore>90):
                grade = "A"
            #If the score is 80 or above, grade will be B
            elif(sscore>80):
                grade = "B"
            #If the score is 70 or above, grade will be C
            elif(sscore>70):
                grade = "C"
            #If the score is 60 or above, grade will be D
            elif(sscore>60):
                grade = "D"    
            #If else, grade will be F
            else:
                grade = "F"
            # Open/Create the studentgrades.txt   
            with open("studentgrades.txt","a") as f:
                #Create a row that states the studentid, name, grade
                f.write(f"{studentid},{name},{grade}\n")
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
            print(type(e))
        #Close the connection
        finally:
            print("Closing any open DB connections")  

    #Define the show function
    def show(self):
        try:
            #When the current tab gets changed
            index=self.tbStudentGrade.currentIndex()
            if(index==1):
                #Connect to the SQL database
                conn = self.connecttodb()
                #Create a cursor object
                cursorobj = conn.cursor()
                #Execute the SQL query
                cursorobj.execute("select * from studentinfo1")
                #Store the data fetched in results
                results = cursorobj.fetchall()
                #Clear anything in list widget
                self.lstData.clear()
                #Give it the following header
                self.lstData.addItem("ID    Name    Grade")
                # For each row, the results should bring the following
                for row in results:
                    sid, sname, sscore = row
                    #Make sure the sscore is a integer
                    sscore = int(sscore)
                    #If the score is 90 or above, grade will be A
                    if(sscore>90):
                        grade = "A"
                    #If else the score is 80 or above, grade will be B
                    elif(sscore>80):
                        grade = "B"
                    #If else the score is 70 or above, grade will be C
                    elif(sscore>70):
                        grade = "C"
                    #If else the score is 60 or above, grade will be D
                    elif(sscore>60):
                        grade = "D"    
                    #If else, grade will be F
                    else:
                        grade = "F"
                    #Add the student ID, name, grade into the list widget
                    self.lstData.addItem(f"{sid}    {sname}    {grade}")
        # If connection fails, print the exception error
        except Exception as e:
            print(e)
            print(type(e))
        #Close the connection
        finally:
            print("Closing any open DB connections")        

    def retranslateUi(self, studentGrade):
        _translate = QtCore.QCoreApplication.translate
        studentGrade.setWindowTitle(_translate("studentGrade", "Student Grade"))
        self.lblStudentId.setText(_translate("studentGrade", "Enter Student ID"))
        self.lblName.setText(_translate("studentGrade", "Enter Student Name"))
        self.lblScore.setText(_translate("studentGrade", "Enter Student Score"))
        self.btnInsert.setText(_translate("studentGrade", "Insert Data"))
        self.btnDisplay.setText(_translate("studentGrade", "Display Data"))
        self.tbStudentGrade.setTabText(self.tbStudentGrade.indexOf(self.tab1), _translate("studentGrade", "Student Info"))
        self.btnExport.setText(_translate("studentGrade", "Export Data"))
        self.tbStudentGrade.setTabText(self.tbStudentGrade.indexOf(self.tab2), _translate("studentGrade", "Student Grade"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    studentGrade = QtWidgets.QMainWindow()
    ui = Ui_studentGrade()
    ui.setupUi(studentGrade)
    studentGrade.show()
    sys.exit(app.exec())
