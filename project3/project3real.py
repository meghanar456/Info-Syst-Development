# Form implementation generated from reading ui file 'project3.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_homePurchase(object):
    def setupUi(self, homePurchase):
        homePurchase.setObjectName("homePurchase")
        homePurchase.resize(800, 591)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        homePurchase.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=homePurchase)
        self.centralwidget.setObjectName("centralwidget")
        self.tbHomePurchase = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tbHomePurchase.setGeometry(QtCore.QRect(40, 40, 591, 521))
        self.tbHomePurchase.setObjectName("tbHomePurchase")
        self.homePurchase = QtWidgets.QWidget()
        self.homePurchase.setObjectName("homePurchase")
        self.lblName = QtWidgets.QLabel(parent=self.homePurchase)
        self.lblName.setGeometry(QtCore.QRect(70, 40, 81, 16))
        self.lblName.setObjectName("lblName")
        self.txtName = QtWidgets.QLineEdit(parent=self.homePurchase)
        self.txtName.setGeometry(QtCore.QRect(230, 40, 113, 20))
        self.txtName.setObjectName("txtName")
        self.lblAge = QtWidgets.QLabel(parent=self.homePurchase)
        self.lblAge.setGeometry(QtCore.QRect(70, 70, 71, 16))
        self.lblAge.setObjectName("lblAge")
        self.txtAge = QtWidgets.QLineEdit(parent=self.homePurchase)
        self.txtAge.setGeometry(QtCore.QRect(230, 70, 113, 20))
        self.txtAge.setObjectName("txtAge")
        self.lblHouseType = QtWidgets.QLabel(parent=self.homePurchase)
        self.lblHouseType.setGeometry(QtCore.QRect(70, 100, 121, 16))
        self.lblHouseType.setObjectName("lblHouseType")
        self.cmbHouseType = QtWidgets.QComboBox(parent=self.homePurchase)
        self.cmbHouseType.setGeometry(QtCore.QRect(230, 100, 111, 22))
        self.cmbHouseType.setObjectName("cmbHouseType")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.lblDownPayment = QtWidgets.QLabel(parent=self.homePurchase)
        self.lblDownPayment.setGeometry(QtCore.QRect(70, 180, 151, 16))
        self.lblDownPayment.setObjectName("lblDownPayment")
        self.grpModelType = QtWidgets.QGroupBox(parent=self.homePurchase)
        self.grpModelType.setGeometry(QtCore.QRect(60, 130, 231, 41))
        self.grpModelType.setObjectName("grpModelType")
        self.rd1 = QtWidgets.QRadioButton(parent=self.grpModelType)
        self.rd1.setGeometry(QtCore.QRect(10, 20, 71, 17))
        self.rd1.setObjectName("rd1")
        self.rd2 = QtWidgets.QRadioButton(parent=self.grpModelType)
        self.rd2.setGeometry(QtCore.QRect(90, 20, 61, 17))
        self.rd2.setObjectName("rd2")
        self.rd3 = QtWidgets.QRadioButton(parent=self.grpModelType)
        self.rd3.setGeometry(QtCore.QRect(160, 20, 61, 17))
        self.rd3.setObjectName("rd3")
        self.txtDownPayment = QtWidgets.QLineEdit(parent=self.homePurchase)
        self.txtDownPayment.setGeometry(QtCore.QRect(230, 180, 113, 20))
        self.txtDownPayment.setObjectName("txtDownPayment")
        self.lstPayments = QtWidgets.QListWidget(parent=self.homePurchase)
        self.lstPayments.setGeometry(QtCore.QRect(100, 320, 211, 151))
        self.lstPayments.setObjectName("lstPayments")
        self.btnPayments = QtWidgets.QPushButton(parent=self.homePurchase)
        self.btnPayments.setGeometry(QtCore.QRect(80, 220, 111, 23))
        self.btnPayments.setObjectName("btnPayments")
        self.btnPurchase = QtWidgets.QPushButton(parent=self.homePurchase)
        self.btnPurchase.setGeometry(QtCore.QRect(230, 220, 111, 23))
        self.btnPurchase.setObjectName("btnPurchase")
        self.btnClear = QtWidgets.QPushButton(parent=self.homePurchase)
        self.btnClear.setGeometry(QtCore.QRect(80, 250, 111, 23))
        self.btnClear.setObjectName("btnClear")
        self.btnExit = QtWidgets.QPushButton(parent=self.homePurchase)
        self.btnExit.setGeometry(QtCore.QRect(230, 250, 111, 23))
        self.btnExit.setObjectName("btnExit")
        self.lblMonthly = QtWidgets.QLabel(parent=self.homePurchase)
        self.lblMonthly.setGeometry(QtCore.QRect(150, 300, 111, 16))
        self.lblMonthly.setObjectName("lblMonthly")
        self.tbHomePurchase.addTab(self.homePurchase, "")
        self.purchasesMade = QtWidgets.QWidget()
        self.purchasesMade.setObjectName("purchasesMade")
        self.lstPurchases = QtWidgets.QListWidget(parent=self.purchasesMade)
        self.lstPurchases.setGeometry(QtCore.QRect(20, 30, 461, 271))
        self.lstPurchases.setObjectName("lstPurchases")
        self.lblPurchases = QtWidgets.QLabel(parent=self.purchasesMade)
        self.lblPurchases.setGeometry(QtCore.QRect(30, 10, 171, 16))
        self.lblPurchases.setObjectName("lblPurchases")
        self.tbHomePurchase.addTab(self.purchasesMade, "")
        homePurchase.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=homePurchase)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        homePurchase.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=homePurchase)
        self.statusbar.setObjectName("statusbar")
        homePurchase.setStatusBar(self.statusbar)

        self.retranslateUi(homePurchase)
        self.tbHomePurchase.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(homePurchase)
        
        #Creating an empty dictionary. This will be populated with house type and price.
        self.price_data={}
        #Load the data from the house price text file.
        self.load_data("houseprice.txt")
        #When btnPayments is clicked, to execute the calculate payments function
        self.btnPayments.clicked.connect(self.calculate_payments)
        #When btnPurchase is clicked, to execute the purchase function        
        self.btnPurchase.clicked.connect(self.purchase)
        #When btnClear is clicked, to execute the clear function        
        self.btnClear.clicked.connect(self.clear)
        #When btnExit is clicked, to execute the appexit function
        self.btnExit.clicked.connect(self.appexit)
        #When user switches tabs, execute the display_data function.
        self.tbHomePurchase.currentChanged.connect(self.display_data)
       
    #Define the load_data function
    def load_data(self, filename):
        #the lines under the code will be excuted normally under the exception handling 
        try:
            #Open the file
            with open(filename, "r") as f:
                #For lopp to read each line of the file
                for line in f:
                    #split the data in the file with a "," delimiter
                    data = line.split(",")
                    #store house type as the key and price as a value in the price_data object
                    self.price_data[data[0]]=int(data[1])
        #If file is not found
        except FileNotFoundError:
            #then, print "File not present"
            print("File not present")
        #If not, print a exception message
        except Exception as e:
            print(e)
            #Print e type of exception message
            print(type(e))
        #Lastly, display "Closing any open DB connections" whenever the code is run    
        finally:
            print("Closing any open DB connections")  
    
    #Define the calculate_payments function
    def calculate_payments(self):
        #the lines under the code will be excuted normally under the exception handling
        try:
            #save selection object to read combo box 
            selection=self.cmbHouseType.currentText()
            #save price_of_house object to read house prices from the dictionary
            price_of_house=self.price_data.get(selection)
            #save down_payment object to read initial down payment as a integer
            down_payment =int(self.txtDownPayment.text()) 
            # if rd 1 is checked, type_of_model equal 1
            if(self.rd1.isChecked()):
                type_of_model=1
            # if rd 2 is checked, type_of_model equal 0.15
            elif(self.rd2.isChecked()):
                type_of_model=0.15
            # if rd 3 is checked, type_of_model equal 0.20
            elif(self.rd3.isChecked()):
                type_of_model=0.20
            # or else, type_of_model equal 1
            else:
                type_of_model=1
            
            #save annual interest rate as 0.07
            annual_interest_rate = 0.07
            #save loan term months as 120
            loan_term_months = 120
            #save loan_amount to be price of the house selected - down payment
            loan_amount = price_of_house-down_payment
            #save monthly interest rate to be annual interest rate divided by 12 (months)
            monthly_interest_rate = annual_interest_rate / 12            
            
            #Using a for loop for each of the month
            for month in range(1,loan_term_months +1):
                #Use the following calculation to generate monthly payment
                monthly_payment = loan_amount * monthly_interest_rate * (1 + monthly_interest_rate)**loan_term_months / ((1 + monthly_interest_rate) ** loan_term_months - 1)
                #On the list box, display the month payments along with the month and remaining balance
                self.lstPayments.addItem(str(month)+"   "+ str(f"${monthly_payment:.2f}")+"   "+ str(f"${loan_amount-monthly_payment:.2f}"))
            
        #If file is not found
        except FileNotFoundError:
            #then, print "File not present"
            print("File not present")
        #If not, print a exception message
        except Exception as e:
            print(e)
            #Print e type of exception message
            print(type(e))
        #Lastly, display "Closing any open DB connections" whenever the code is run    
        finally:
            print("Closing any open DB connections") 
    
    #Define the purchase function
    def purchase(self):
        #the lines under the code will be excuted normally under the exception handling
        try:
            #save name object to read name text box
            name=self.txtName.text()
            #save age object to read age text box
            age=self.txtAge.text()
            #save down payment object to read down payment text box
            down_payment = self.txtDownPayment.text()
            #save selection object to read house type combo box
            selection=self.cmbHouseType.currentText()
            
            #If the name doesn't have an vaild input, display the following message
            if name == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Home Purchase")
                msg.setText("Please enter your name.")
                msg.exec()
            #If the age doesn't have an vaild input, display the following message
            if age == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Home Purchase")
                msg.setText("Please enter your age.")
                msg.exec()  
            #If the down payment doesn't have an vaild input, display the following message
            if down_payment == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Home Purchase")
                msg.setText("Please enter your initial down payment.")
                msg.exec()  
            #If the selection doesn't have an vaild input, display the following message
            if selection == "":
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Home Purchase")
                msg.setText("Please select a house type.")
                msg.exec()    
            #If the rd 1 is selected, type of model equals "Standard"
            if(self.rd1.isChecked()):
                type_of_model= "Standard"
            #If the rd 2 is selected, type of model equals "Smart"
            elif(self.rd2.isChecked()):
                type_of_model= "Smart"
            #If the rd 3 is selected, type of model equals "Luxury"
            elif(self.rd3.isChecked()):
                type_of_model= "Luxury"
            #If none of the buttons gets selected, display the following message box
            else:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Home Purchase")
                msg.setText("Please select a model type")
                msg.exec()
           
            #Open a text file called Purchases_made, and save name, age, house type, model type, down payment entered into the file.
            with open("Purchases_made.txt","a") as f:
                f.write(f"Name:{name},Age:{age},House:{selection},Model:{type_of_model},Down Payment:{down_payment} \n")
        #If file is not found
        except FileNotFoundError:
            #then, print "File not present"
            print("File not present")
        #If not, print a exception message
        except Exception as e:
            print(e)
            #Print e type of exception message
            print(type(e))
        #Lastly, display "Closing any open DB connections" whenever the code is run    
        finally:
            print("Closing any open DB connections") 
    
    #Define the clear function
    def clear(self):
        #the lines under the code will be excuted normally under the exception handling
        try:
            #Clear the Name text box
            self.txtName.clear()
            #Clear the Age text box
            self.txtAge.clear()
            #Clear the Down Payment text box
            self.txtDownPayment.clear()
            #Clear the House Type combo box
            self.cmbHouseType.setCurrentIndex(0)
            #Clear the radio buttons
            self.rd1.setChecked(True)
            #Clear the Monthly Payments list box
            self.lstPayments.clear()
        #If file is not found
        except FileNotFoundError:
            #then, print "File not present"
            print("File not present")
        #If not, print a exception message
        except Exception as e:
            print(e)
            #Print e type of exception message
            print(type(e))
        #Lastly, display "Closing any open DB connections" whenever the code is run    
        finally:
            print("Closing any open DB connections") 
    
    #Define the appexit function
    def appexit(self):
        #Close the python window
        QtWidgets.QApplication.quit()
    
    #Define the display data function    
    def display_data(self):
        #the lines under the code will be excuted normally under the exception handling
        try:
            #index objects is the current tab
            index=self.tbHomePurchase.currentIndex()
            #when the user is on the Purchases Made tab, display the Purchases_made file
            if(index==1):
                with open("Purchases_made.txt", "r") as f:
                    #Read lines from the text file
                    for line in f:
                        #Show the purchases made in the the list box
                        self.lstPurchases.addItem(line)
        #If file is not found
        except FileNotFoundError:
            #then, print "File not present"
            print("File not present")
        #If not, print a exception message
        except Exception as e:
            print(e)
            #Print e type of exception message
            print(type(e))
        #Lastly, display "Closing any open DB connections" whenever the code is run    
        finally:
            print("Closing any open DB connections") 


    def retranslateUi(self, homePurchase):
        _translate = QtCore.QCoreApplication.translate
        homePurchase.setWindowTitle(_translate("homePurchase", "Home Purchase"))
        self.lblName.setText(_translate("homePurchase", "Enter Name"))
        self.lblAge.setText(_translate("homePurchase", "Enter Age"))
        self.lblHouseType.setText(_translate("homePurchase", "Select House Type"))
        self.cmbHouseType.setItemText(0, _translate("homePurchase", "Apartment"))
        self.cmbHouseType.setItemText(1, _translate("homePurchase", "Townhouse"))
        self.cmbHouseType.setItemText(2, _translate("homePurchase", "Single-Family Home"))
        self.cmbHouseType.setItemText(3, _translate("homePurchase", "Luxury Villa"))
        self.lblDownPayment.setText(_translate("homePurchase", "Enter Initial Down Payment"))
        self.grpModelType.setTitle(_translate("homePurchase", "Select Model Type"))
        self.rd1.setText(_translate("homePurchase", "Standard"))
        self.rd2.setText(_translate("homePurchase", "Smart"))
        self.rd3.setText(_translate("homePurchase", "Luxury"))
        self.btnPayments.setText(_translate("homePurchase", "Show Payments"))
        self.btnPurchase.setText(_translate("homePurchase", "Purchase"))
        self.btnClear.setText(_translate("homePurchase", "Clear"))
        self.btnExit.setText(_translate("homePurchase", "Exit"))
        self.lblMonthly.setText(_translate("homePurchase", "Monthy Payments"))
        self.tbHomePurchase.setTabText(self.tbHomePurchase.indexOf(self.homePurchase), _translate("homePurchase", "Home Purchase"))
        self.lblPurchases.setText(_translate("homePurchase", "List of past home purchases"))
        self.tbHomePurchase.setTabText(self.tbHomePurchase.indexOf(self.purchasesMade), _translate("homePurchase", "Purchases Made"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    homePurchase = QtWidgets.QMainWindow()
    ui = Ui_homePurchase()
    ui.setupUi(homePurchase)
    homePurchase.show()
    sys.exit(app.exec())
